import { useEffect, useRef, useState } from 'react'
import styles from './LazyImage.module.css'

interface LazyImageProps {
	src: string
	alt: string
	className?: string
	style?: React.CSSProperties
	placeholder?: string
	onLoad?: () => void
	onError?: () => void
}

export function LazyImage({ 
	src, 
	alt, 
	className, 
	style, 
	placeholder = '',
	onLoad,
	onError 
}: LazyImageProps) {
	const [isLoaded, setIsLoaded] = useState(false)
	const [imageSrc, setImageSrc] = useState(placeholder || src)
	const [hasError, setHasError] = useState(false)
	const imgRef = useRef<HTMLImageElement>(null)

	useEffect(() => {
		if (!src) return

		// –°–æ–∑–¥–∞–µ–º Intersection Observer –¥–ª—è lazy loading
		const observer = new IntersectionObserver(
			(entries) => {
				entries.forEach((entry) => {
					if (entry.isIntersecting) {
						// –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ø–∞–ª–æ –≤ –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
						setImageSrc(src)
						observer.unobserve(entry.target)
					}
				})
			},
			{
				rootMargin: '50px', // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∂–∞—Ç—å –∑–∞ 50px –¥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è
				threshold: 0.1
			}
		)

		if (imgRef.current) {
			observer.observe(imgRef.current)
		}

		return () => {
			if (imgRef.current) {
				observer.unobserve(imgRef.current)
			}
		}
	}, [src])

	const handleLoad = () => {
		setIsLoaded(true)
		setHasError(false)
		onLoad?.()
	}

	const handleError = () => {
		setHasError(true)
		onError?.()
	}

	return (
		<div 
			className={`${styles.imageContainer} ${className || ''}`}
			style={style}
		>
			{/* Placeholder –ø–æ–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ */}
			{!isLoaded && !hasError && (
				<div className={styles.placeholder}>
					<div className={styles.placeholderContent}>
						<div className={styles.loadingSpinner}></div>
					</div>
				</div>
			)}

			{/* –û—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
			<img
				ref={imgRef}
				src={imageSrc}
				alt={alt}
				className={`${styles.image} ${isLoaded ? styles.loaded : ''}`}
				onLoad={handleLoad}
				onError={handleError}
				style={{
					opacity: isLoaded ? 1 : 0,
					transition: 'opacity 0.3s ease-in-out'
				}}
			/>

			{/* Fallback –ø—Ä–∏ –æ—à–∏–±–∫–µ */}
			{hasError && (
				<div className={styles.errorFallback}>
					<div className={styles.errorIcon}>üì∑</div>
					<span className={styles.errorText}>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</span>
				</div>
			)}
		</div>
	)
}
